import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split

nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')
def preprocess(text):
    # Tokenization
    tokens = word_tokenize(text.lower())
    
    # Remove stopwords
    stop_words = set(stopwords.words('english'))
    tokens = [token for token in tokens if token not in stop_words]
    
    # Lemmatization
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(token) for token in tokens]
    
    return ' '.join(tokens)

# Positive and negative polarity words
positive_words = ['good', 'great', 'excellent', 'positive', 'awesome']
negative_words = ['bad', 'terrible', 'negative', 'awful', 'poor']

documents = [
    ("The movie was excellent, I loved it!", 'positive'),
    ("The food was terrible, I wouldn't recommend it.", 'negative'),
    ("I had a great experience with their customer service.", 'positive'),
    ("The weather today is awful, I hate it.", 'negative'),
    ("The product quality is poor, very disappointing.", 'negative'),
    ("I had a good time at the party, it was fun!", 'positive')
]
preprocessed_documents = [(preprocess(doc), label) for doc, label in documents]
train_data, test_data = train_test_split(preprocessed_documents, test_size=0.2, random_state=42)
# Create TF-IDF vectorizer
vectorizer = TfidfVectorizer()
# Create TF-IDF vectorizer
vectorizer = TfidfVectorizer()
# Train a Naive Bayes classifier
classifier = MultinomialNB()
classifier.fit(train_features, [label for _, label in train_data])
# User input
user_input = input("Enter a document: ")
preprocessed_input = preprocess(user_input)
input_features = vectorizer.transform([preprocessed_input])
# Predict polarity
prediction = classifier.predict(input_features)[0]
print("Predicted polarity:", prediction)
